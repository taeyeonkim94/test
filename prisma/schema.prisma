// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @unique
}

model User {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email             String         @unique
  nickName          String
  phoneNumber       String
  password          String
  image             ProfileImage
  tripType          TripType? //드리머용 프로필 MBTI
  serviceType       TripType? //메이커용 트립타입
  serviceArea       ServiceArea?
  gallery           String?
  description       String?
  detailDescription String?
  role              Role
  messages          Message[]
  chats             Chat[]
  nofitications     Nofitication[]
  receivedReviews   Review[]       @relation("owner")
  writtenReviews    Review[]       @relation("writer")
  followers         Follow[]       @relation("maker")
  followees         Follow[]       @relation("dreamer")
  quotes            Quote[]
  plans             Plan[]         @relation("isFinal") // 메이커입장: 내가 수행하고 있는, 완료한 플랜 + 지정플랜
  assignPlans       Plan[]         @relation("isAssign")
}

model Review {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  writer   User?   @relation("writer", fields: [writerId], references: [id])
  writerId String?
  owner    User?   @relation("owner", fields: [ownerId], references: [id])
  ownerId  String?

  rating  Int
  content String
  plan    Plan   @relation(fields: [planId], references: [id])
  planId  String
}

model Chat {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  messages Message[]
}

model Message {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId String?
  sender   User?   @relation(fields: [senderId], references: [id], onDelete: SetNull)

  chatId  String
  chat    Chat   @relation(fields: [chatId], references: [id])
  content String
}

model Nofitication {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId  String?
  content String
  isRead  Boolean @default(false)
}

model Follow {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maker     User?   @relation("maker", fields: [makerId], references: [id], onDelete: SetNull)
  makerId   String?
  dreamer   User?   @relation("dreamer", fields: [dreamerId], references: [id], onDelete: SetNull)
  dreamerId String?
}

model Plan {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedule    DateTime[]
  tripType    TripType
  quotes      Quote[]
  area        String
  isConfirmed Boolean    @default(false)
  isCompleted Boolean    @default(false)
  assignees   User[]     @relation("isAssign")
  dreamer     User?      @relation("isFinal", fields: [dreamerId], references: [id], onDelete: SetNull)
  dreamerId   String?
  reviews     Review[]
}

model Quote {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price       Int
  content     String
  plan        Plan    @relation(fields: [planId], references: [id])
  planId      String
  maker       User?   @relation(fields: [makerId], references: [id])
  makerId     String?
  isConfirmed Boolean @default(false)
  isAssigned  Boolean @default(false)
}

enum ProfileImage {
  A
  B
  C
  D
}

enum TripType {
  FOOD_TOUR
  SHOPPING
  RELAXATION
  CULTURE
  ACTIVITY
  FESTIVAL
}

enum ServiceArea {
  SEOUL
  BUSAN
  INCHEON
  DAEGU
  DAEJEON
  GWANGJU
  ULSAN
  SEJONG
  GYEONGGI
  GANGWON
  CHAUNGBUK
  CHAUNGNAM
  JEONBUK
  JEONNAM
  GYEONGBUK
  GYEONGNAM
  JEJU
}

enum Role {
  DREAMER
  MAKER
}
